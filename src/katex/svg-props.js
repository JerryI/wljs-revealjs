// http://geoexamples.com/path-properties/ v1.2.0 Copyright 2023 Roger Veciana i Rovira

    "use strict";
    function n(t, n) {
        for (var e = 0; e < n.length; e++) {
            var i = n[e];
            (i.enumerable = i.enumerable || !1), (i.configurable = !0), "value" in i && (i.writable = !0), Object.defineProperty(t, s(i.key), i);
        }
    }
    function e(t, e, i) {
        return e && n(t.prototype, e), i && n(t, i), Object.defineProperty(t, "prototype", { writable: !1 }), t;
    }
    function i(t, n, e) {
        return (n = s(n)) in t ? Object.defineProperty(t, n, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : (t[n] = e), t;
    }
    function r(t) {
        return (
            (function (t) {
                if (Array.isArray(t)) return h(t);
            })(t) ||
            (function (t) {
                if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"]) return Array.from(t);
            })(t) ||
            (function (t, n) {
                if (!t) return;
                if ("string" == typeof t) return h(t, n);
                var e = Object.prototype.toString.call(t).slice(8, -1);
                "Object" === e && t.constructor && (e = t.constructor.name);
                if ("Map" === e || "Set" === e) return Array.from(t);
                if ("Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)) return h(t, n);
            })(t) ||
            (function () {
                throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            })()
        );
    }
    function h(t, n) {
        (null == n || n > t.length) && (n = t.length);
        for (var e = 0, i = new Array(n); e < n; e++) i[e] = t[e];
        return i;
    }
    function s(t) {
        var n = (function (t, n) {
            if ("object" != typeof t || null === t) return t;
            var e = t[Symbol.toPrimitive];
            if (void 0 !== e) {
                var i = e.call(t, n || "default");
                if ("object" != typeof i) return i;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === n ? String : Number)(t);
        })(t, "string");
        return "symbol" == typeof n ? n : String(n);
    }
    var a = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 },
        o = /([astvzqmhlc])([^astvzqmhlc]*)/gi,
        g = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/gi,
        u = function (t) {
            var n = t.match(g);
            return n ? n.map(Number) : [];
        },
        l = e(function (t, n, e, r) {
            var h = this;
            i(this, "x0", void 0),
                i(this, "x1", void 0),
                i(this, "y0", void 0),
                i(this, "y1", void 0),
                i(this, "getTotalLength", function () {
                    return Math.sqrt(Math.pow(h.x0 - h.x1, 2) + Math.pow(h.y0 - h.y1, 2));
                }),
                i(this, "getPointAtLength", function (t) {
                    var n = t / Math.sqrt(Math.pow(h.x0 - h.x1, 2) + Math.pow(h.y0 - h.y1, 2));
                    n = Number.isNaN(n) ? 1 : n;
                    var e = (h.x1 - h.x0) * n,
                        i = (h.y1 - h.y0) * n;
                    return { x: h.x0 + e, y: h.y0 + i };
                }),
                i(this, "getTangentAtLength", function (t) {
                    var n = Math.sqrt((h.x1 - h.x0) * (h.x1 - h.x0) + (h.y1 - h.y0) * (h.y1 - h.y0));
                    return { x: (h.x1 - h.x0) / n, y: (h.y1 - h.y0) / n };
                }),
                i(this, "getPropertiesAtLength", function (t) {
                    var n = h.getPointAtLength(t),
                        e = h.getTangentAtLength(t);
                    return { x: n.x, y: n.y, tangentX: e.x, tangentY: e.y };
                }),
                (this.x0 = t),
                (this.x1 = n),
                (this.y0 = e),
                (this.y1 = r);
        }),
        c = e(function (t, n, e, r, h, s, a, o, g) {
            var u = this;
            i(this, "x0", void 0),
                i(this, "y0", void 0),
                i(this, "rx", void 0),
                i(this, "ry", void 0),
                i(this, "xAxisRotate", void 0),
                i(this, "LargeArcFlag", void 0),
                i(this, "SweepFlag", void 0),
                i(this, "x1", void 0),
                i(this, "y1", void 0),
                i(this, "length", void 0),
                i(this, "getTotalLength", function () {
                    return u.length;
                }),
                i(this, "getPointAtLength", function (t) {
                    t < 0 ? (t = 0) : t > u.length && (t = u.length);
                    var n = f({ x: u.x0, y: u.y0 }, u.rx, u.ry, u.xAxisRotate, u.LargeArcFlag, u.SweepFlag, { x: u.x1, y: u.y1 }, t / u.length);
                    return { x: n.x, y: n.y };
                }),
                i(this, "getTangentAtLength", function (t) {
                    t < 0 ? (t = 0) : t > u.length && (t = u.length);
                    var n,
                        e = 0.05,
                        i = u.getPointAtLength(t);
                    t < 0 ? (t = 0) : t > u.length && (t = u.length);
                    var r = (n = t < u.length - e ? u.getPointAtLength(t + e) : u.getPointAtLength(t - e)).x - i.x,
                        h = n.y - i.y,
                        s = Math.sqrt(r * r + h * h);
                    return t < u.length - e ? { x: -r / s, y: -h / s } : { x: r / s, y: h / s };
                }),
                i(this, "getPropertiesAtLength", function (t) {
                    var n = u.getTangentAtLength(t),
                        e = u.getPointAtLength(t);
                    return { x: e.x, y: e.y, tangentX: n.x, tangentY: n.y };
                }),
                (this.x0 = t),
                (this.y0 = n),
                (this.rx = e),
                (this.ry = r),
                (this.xAxisRotate = h),
                (this.LargeArcFlag = s),
                (this.SweepFlag = a),
                (this.x1 = o),
                (this.y1 = g);
            var l = y(300, function (i) {
                return f({ x: t, y: n }, e, r, h, s, a, { x: o, y: g }, i);
            });
            this.length = l.arcLength;
        }),
        f = function (t, n, e, i, r, h, s, a) {
            (n = Math.abs(n)), (e = Math.abs(e)), (i = p(i, 360));
            var o = x(i);
            if (t.x === s.x && t.y === s.y) return { x: t.x, y: t.y, ellipticalArcAngle: 0 };
            if (0 === n || 0 === e) return { x: 0, y: 0, ellipticalArcAngle: 0 };
            var g = (t.x - s.x) / 2,
                u = (t.y - s.y) / 2,
                l = { x: Math.cos(o) * g + Math.sin(o) * u, y: -Math.sin(o) * g + Math.cos(o) * u },
                c = Math.pow(l.x, 2) / Math.pow(n, 2) + Math.pow(l.y, 2) / Math.pow(e, 2);
            c > 1 && ((n = Math.sqrt(c) * n), (e = Math.sqrt(c) * e));
            var f = (Math.pow(n, 2) * Math.pow(e, 2) - Math.pow(n, 2) * Math.pow(l.y, 2) - Math.pow(e, 2) * Math.pow(l.x, 2)) / (Math.pow(n, 2) * Math.pow(l.y, 2) + Math.pow(e, 2) * Math.pow(l.x, 2));
            f = f < 0 ? 0 : f;
            var y = (r !== h ? 1 : -1) * Math.sqrt(f),
                v = y * ((n * l.y) / e),
                M = y * ((-e * l.x) / n),
                L = { x: Math.cos(o) * v - Math.sin(o) * M + (t.x + s.x) / 2, y: Math.sin(o) * v + Math.cos(o) * M + (t.y + s.y) / 2 },
                d = { x: (l.x - v) / n, y: (l.y - M) / e },
                A = w({ x: 1, y: 0 }, d),
                b = w(d, { x: (-l.x - v) / n, y: (-l.y - M) / e });
            !h && b > 0 ? (b -= 2 * Math.PI) : h && b < 0 && (b += 2 * Math.PI);
            var P = A + (b %= 2 * Math.PI) * a,
                m = n * Math.cos(P),
                T = e * Math.sin(P);
            return {
                x: Math.cos(o) * m - Math.sin(o) * T + L.x,
                y: Math.sin(o) * m + Math.cos(o) * T + L.y,
                ellipticalArcStartAngle: A,
                ellipticalArcEndAngle: A + b,
                ellipticalArcAngle: P,
                ellipticalArcCenter: L,
                resultantRx: n,
                resultantRy: e,
            };
        },
        y = function (t, n) {
            t = t || 500;
            for (var e, i = 0, r = [], h = [], s = n(0), a = 0; a < t; a++) {
                var o = M(a * (1 / t), 0, 1);
                (e = n(o)), (i += v(s, e)), h.push([s, e]), r.push({ t: o, arcLength: i }), (s = e);
            }
            return (e = n(1)), h.push([s, e]), (i += v(s, e)), r.push({ t: 1, arcLength: i }), { arcLength: i, arcLengthMap: r, approximationLines: h };
        },
        p = function (t, n) {
            return ((t % n) + n) % n;
        },
        x = function (t) {
            return t * (Math.PI / 180);
        },
        v = function (t, n) {
            return Math.sqrt(Math.pow(n.x - t.x, 2) + Math.pow(n.y - t.y, 2));
        },
        M = function (t, n, e) {
            return Math.min(Math.max(t, n), e);
        },
        w = function (t, n) {
            var e = t.x * n.x + t.y * n.y,
                i = Math.sqrt((Math.pow(t.x, 2) + Math.pow(t.y, 2)) * (Math.pow(n.x, 2) + Math.pow(n.y, 2)));
            return (t.x * n.y - t.y * n.x < 0 ? -1 : 1) * Math.acos(e / i);
        },
        L = [
            [],
            [],
            [-0.5773502691896257, 0.5773502691896257],
            [0, -0.7745966692414834, 0.7745966692414834],
            [-0.33998104358485626, 0.33998104358485626, -0.8611363115940526, 0.8611363115940526],
            [0, -0.5384693101056831, 0.5384693101056831, -0.906179845938664, 0.906179845938664],
            [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.932469514203152, 0.932469514203152],
            [0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585, 0.9491079123427585],
            [-0.1834346424956498, 0.1834346424956498, -0.525532409916329, 0.525532409916329, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363],
            [0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904],
            [-0.14887433898163122, 0.14887433898163122, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717],
            [0, -0.26954315595234496, 0.26954315595234496, -0.5190961292068118, 0.5190961292068118, -0.7301520055740494, 0.7301520055740494, -0.8870625997680953, 0.8870625997680953, -0.978228658146057, 0.978228658146057],
            [
                -0.1252334085114689,
                0.1252334085114689,
                -0.3678314989981802,
                0.3678314989981802,
                -0.5873179542866175,
                0.5873179542866175,
                -0.7699026741943047,
                0.7699026741943047,
                -0.9041172563704749,
                0.9041172563704749,
                -0.9815606342467192,
                0.9815606342467192,
            ],
            [
                0,
                -0.2304583159551348,
                0.2304583159551348,
                -0.44849275103644687,
                0.44849275103644687,
                -0.6423493394403402,
                0.6423493394403402,
                -0.8015780907333099,
                0.8015780907333099,
                -0.9175983992229779,
                0.9175983992229779,
                -0.9841830547185881,
                0.9841830547185881,
            ],
            [
                -0.10805494870734367,
                0.10805494870734367,
                -0.31911236892788974,
                0.31911236892788974,
                -0.5152486363581541,
                0.5152486363581541,
                -0.6872929048116855,
                0.6872929048116855,
                -0.827201315069765,
                0.827201315069765,
                -0.9284348836635735,
                0.9284348836635735,
                -0.9862838086968123,
                0.9862838086968123,
            ],
            [
                0,
                -0.20119409399743451,
                0.20119409399743451,
                -0.3941513470775634,
                0.3941513470775634,
                -0.5709721726085388,
                0.5709721726085388,
                -0.7244177313601701,
                0.7244177313601701,
                -0.8482065834104272,
                0.8482065834104272,
                -0.937273392400706,
                0.937273392400706,
                -0.9879925180204854,
                0.9879925180204854,
            ],
            [
                -0.09501250983763744,
                0.09501250983763744,
                -0.2816035507792589,
                0.2816035507792589,
                -0.45801677765722737,
                0.45801677765722737,
                -0.6178762444026438,
                0.6178762444026438,
                -0.755404408355003,
                0.755404408355003,
                -0.8656312023878318,
                0.8656312023878318,
                -0.9445750230732326,
                0.9445750230732326,
                -0.9894009349916499,
                0.9894009349916499,
            ],
            [
                0,
                -0.17848418149584785,
                0.17848418149584785,
                -0.3512317634538763,
                0.3512317634538763,
                -0.5126905370864769,
                0.5126905370864769,
                -0.6576711592166907,
                0.6576711592166907,
                -0.7815140038968014,
                0.7815140038968014,
                -0.8802391537269859,
                0.8802391537269859,
                -0.9506755217687678,
                0.9506755217687678,
                -0.9905754753144174,
                0.9905754753144174,
            ],
            [
                -0.0847750130417353,
                0.0847750130417353,
                -0.2518862256915055,
                0.2518862256915055,
                -0.41175116146284263,
                0.41175116146284263,
                -0.5597708310739475,
                0.5597708310739475,
                -0.6916870430603532,
                0.6916870430603532,
                -0.8037049589725231,
                0.8037049589725231,
                -0.8926024664975557,
                0.8926024664975557,
                -0.9558239495713977,
                0.9558239495713977,
                -0.9915651684209309,
                0.9915651684209309,
            ],
            [
                0,
                -0.16035864564022537,
                0.16035864564022537,
                -0.31656409996362983,
                0.31656409996362983,
                -0.46457074137596094,
                0.46457074137596094,
                -0.600545304661681,
                0.600545304661681,
                -0.7209661773352294,
                0.7209661773352294,
                -0.8227146565371428,
                0.8227146565371428,
                -0.9031559036148179,
                0.9031559036148179,
                -0.96020815213483,
                0.96020815213483,
                -0.9924068438435844,
                0.9924068438435844,
            ],
            [
                -0.07652652113349734,
                0.07652652113349734,
                -0.22778585114164507,
                0.22778585114164507,
                -0.37370608871541955,
                0.37370608871541955,
                -0.5108670019508271,
                0.5108670019508271,
                -0.636053680726515,
                0.636053680726515,
                -0.7463319064601508,
                0.7463319064601508,
                -0.8391169718222188,
                0.8391169718222188,
                -0.912234428251326,
                0.912234428251326,
                -0.9639719272779138,
                0.9639719272779138,
                -0.9931285991850949,
                0.9931285991850949,
            ],
            [
                0,
                -0.1455618541608951,
                0.1455618541608951,
                -0.2880213168024011,
                0.2880213168024011,
                -0.4243421202074388,
                0.4243421202074388,
                -0.5516188358872198,
                0.5516188358872198,
                -0.6671388041974123,
                0.6671388041974123,
                -0.7684399634756779,
                0.7684399634756779,
                -0.8533633645833173,
                0.8533633645833173,
                -0.9200993341504008,
                0.9200993341504008,
                -0.9672268385663063,
                0.9672268385663063,
                -0.9937521706203895,
                0.9937521706203895,
            ],
            [
                -0.06973927331972223,
                0.06973927331972223,
                -0.20786042668822127,
                0.20786042668822127,
                -0.34193582089208424,
                0.34193582089208424,
                -0.469355837986757,
                0.469355837986757,
                -0.5876404035069116,
                0.5876404035069116,
                -0.6944872631866827,
                0.6944872631866827,
                -0.7878168059792081,
                0.7878168059792081,
                -0.8658125777203002,
                0.8658125777203002,
                -0.926956772187174,
                0.926956772187174,
                -0.9700604978354287,
                0.9700604978354287,
                -0.9942945854823992,
                0.9942945854823992,
            ],
            [
                0,
                -0.1332568242984661,
                0.1332568242984661,
                -0.26413568097034495,
                0.26413568097034495,
                -0.3903010380302908,
                0.3903010380302908,
                -0.5095014778460075,
                0.5095014778460075,
                -0.6196098757636461,
                0.6196098757636461,
                -0.7186613631319502,
                0.7186613631319502,
                -0.8048884016188399,
                0.8048884016188399,
                -0.8767523582704416,
                0.8767523582704416,
                -0.9329710868260161,
                0.9329710868260161,
                -0.9725424712181152,
                0.9725424712181152,
                -0.9947693349975522,
                0.9947693349975522,
            ],
            [
                -0.06405689286260563,
                0.06405689286260563,
                -0.1911188674736163,
                0.1911188674736163,
                -0.3150426796961634,
                0.3150426796961634,
                -0.4337935076260451,
                0.4337935076260451,
                -0.5454214713888396,
                0.5454214713888396,
                -0.6480936519369755,
                0.6480936519369755,
                -0.7401241915785544,
                0.7401241915785544,
                -0.820001985973903,
                0.820001985973903,
                -0.8864155270044011,
                0.8864155270044011,
                -0.9382745520027328,
                0.9382745520027328,
                -0.9747285559713095,
                0.9747285559713095,
                -0.9951872199970213,
                0.9951872199970213,
            ],
        ],
        d = [
            [],
            [],
            [1, 1],
            [0.8888888888888888, 0.5555555555555556, 0.5555555555555556],
            [0.6521451548625461, 0.6521451548625461, 0.34785484513745385, 0.34785484513745385],
            [0.5688888888888889, 0.47862867049936647, 0.47862867049936647, 0.23692688505618908, 0.23692688505618908],
            [0.3607615730481386, 0.3607615730481386, 0.46791393457269104, 0.46791393457269104, 0.17132449237917036, 0.17132449237917036],
            [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.27970539148927664, 0.27970539148927664, 0.1294849661688697, 0.1294849661688697],
            [0.362683783378362, 0.362683783378362, 0.31370664587788727, 0.31370664587788727, 0.22238103445337448, 0.22238103445337448, 0.10122853629037626, 0.10122853629037626],
            [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.08127438836157441, 0.08127438836157441, 0.31234707704000286, 0.31234707704000286, 0.26061069640293544, 0.26061069640293544],
            [0.29552422471475287, 0.29552422471475287, 0.26926671930999635, 0.26926671930999635, 0.21908636251598204, 0.21908636251598204, 0.1494513491505806, 0.1494513491505806, 0.06667134430868814, 0.06667134430868814],
            [
                0.2729250867779006,
                0.26280454451024665,
                0.26280454451024665,
                0.23319376459199048,
                0.23319376459199048,
                0.18629021092773426,
                0.18629021092773426,
                0.1255803694649046,
                0.1255803694649046,
                0.05566856711617366,
                0.05566856711617366,
            ],
            [
                0.24914704581340277,
                0.24914704581340277,
                0.2334925365383548,
                0.2334925365383548,
                0.20316742672306592,
                0.20316742672306592,
                0.16007832854334622,
                0.16007832854334622,
                0.10693932599531843,
                0.10693932599531843,
                0.04717533638651183,
                0.04717533638651183,
            ],
            [
                0.2325515532308739,
                0.22628318026289723,
                0.22628318026289723,
                0.2078160475368885,
                0.2078160475368885,
                0.17814598076194574,
                0.17814598076194574,
                0.13887351021978725,
                0.13887351021978725,
                0.09212149983772845,
                0.09212149983772845,
                0.04048400476531588,
                0.04048400476531588,
            ],
            [
                0.2152638534631578,
                0.2152638534631578,
                0.2051984637212956,
                0.2051984637212956,
                0.18553839747793782,
                0.18553839747793782,
                0.15720316715819355,
                0.15720316715819355,
                0.12151857068790319,
                0.12151857068790319,
                0.08015808715976021,
                0.08015808715976021,
                0.03511946033175186,
                0.03511946033175186,
            ],
            [
                0.2025782419255613,
                0.19843148532711158,
                0.19843148532711158,
                0.1861610000155622,
                0.1861610000155622,
                0.16626920581699392,
                0.16626920581699392,
                0.13957067792615432,
                0.13957067792615432,
                0.10715922046717194,
                0.10715922046717194,
                0.07036604748810812,
                0.07036604748810812,
                0.03075324199611727,
                0.03075324199611727,
            ],
            [
                0.1894506104550685,
                0.1894506104550685,
                0.18260341504492358,
                0.18260341504492358,
                0.16915651939500254,
                0.16915651939500254,
                0.14959598881657674,
                0.14959598881657674,
                0.12462897125553388,
                0.12462897125553388,
                0.09515851168249279,
                0.09515851168249279,
                0.062253523938647894,
                0.062253523938647894,
                0.027152459411754096,
                0.027152459411754096,
            ],
            [
                0.17944647035620653,
                0.17656270536699264,
                0.17656270536699264,
                0.16800410215645004,
                0.16800410215645004,
                0.15404576107681028,
                0.15404576107681028,
                0.13513636846852548,
                0.13513636846852548,
                0.11188384719340397,
                0.11188384719340397,
                0.08503614831717918,
                0.08503614831717918,
                0.0554595293739872,
                0.0554595293739872,
                0.02414830286854793,
                0.02414830286854793,
            ],
            [
                0.1691423829631436,
                0.1691423829631436,
                0.16427648374583273,
                0.16427648374583273,
                0.15468467512626524,
                0.15468467512626524,
                0.14064291467065065,
                0.14064291467065065,
                0.12255520671147846,
                0.12255520671147846,
                0.10094204410628717,
                0.10094204410628717,
                0.07642573025488905,
                0.07642573025488905,
                0.0497145488949698,
                0.0497145488949698,
                0.02161601352648331,
                0.02161601352648331,
            ],
            [
                0.1610544498487837,
                0.15896884339395434,
                0.15896884339395434,
                0.15276604206585967,
                0.15276604206585967,
                0.1426067021736066,
                0.1426067021736066,
                0.12875396253933621,
                0.12875396253933621,
                0.11156664554733399,
                0.11156664554733399,
                0.09149002162245,
                0.09149002162245,
                0.06904454273764123,
                0.06904454273764123,
                0.0448142267656996,
                0.0448142267656996,
                0.019461788229726478,
                0.019461788229726478,
            ],
            [
                0.15275338713072584,
                0.15275338713072584,
                0.14917298647260374,
                0.14917298647260374,
                0.14209610931838204,
                0.14209610931838204,
                0.13168863844917664,
                0.13168863844917664,
                0.11819453196151841,
                0.11819453196151841,
                0.10193011981724044,
                0.10193011981724044,
                0.08327674157670475,
                0.08327674157670475,
                0.06267204833410907,
                0.06267204833410907,
                0.04060142980038694,
                0.04060142980038694,
                0.017614007139152118,
                0.017614007139152118,
            ],
            [
                0.14608113364969041,
                0.14452440398997005,
                0.14452440398997005,
                0.13988739479107315,
                0.13988739479107315,
                0.13226893863333747,
                0.13226893863333747,
                0.12183141605372853,
                0.12183141605372853,
                0.10879729916714838,
                0.10879729916714838,
                0.09344442345603386,
                0.09344442345603386,
                0.0761001136283793,
                0.0761001136283793,
                0.057134425426857205,
                0.057134425426857205,
                0.036953789770852494,
                0.036953789770852494,
                0.016017228257774335,
                0.016017228257774335,
            ],
            [
                0.13925187285563198,
                0.13925187285563198,
                0.13654149834601517,
                0.13654149834601517,
                0.13117350478706238,
                0.13117350478706238,
                0.12325237681051242,
                0.12325237681051242,
                0.11293229608053922,
                0.11293229608053922,
                0.10041414444288096,
                0.10041414444288096,
                0.08594160621706773,
                0.08594160621706773,
                0.06979646842452049,
                0.06979646842452049,
                0.052293335152683286,
                0.052293335152683286,
                0.03377490158481415,
                0.03377490158481415,
                0.0146279952982722,
                0.0146279952982722,
            ],
            [
                0.13365457218610619,
                0.1324620394046966,
                0.1324620394046966,
                0.12890572218808216,
                0.12890572218808216,
                0.12304908430672953,
                0.12304908430672953,
                0.11499664022241136,
                0.11499664022241136,
                0.10489209146454141,
                0.10489209146454141,
                0.09291576606003515,
                0.09291576606003515,
                0.07928141177671895,
                0.07928141177671895,
                0.06423242140852585,
                0.06423242140852585,
                0.04803767173108467,
                0.04803767173108467,
                0.030988005856979445,
                0.030988005856979445,
                0.013411859487141771,
                0.013411859487141771,
            ],
            [
                0.12793819534675216,
                0.12793819534675216,
                0.1258374563468283,
                0.1258374563468283,
                0.12167047292780339,
                0.12167047292780339,
                0.1155056680537256,
                0.1155056680537256,
                0.10744427011596563,
                0.10744427011596563,
                0.09761865210411388,
                0.09761865210411388,
                0.08619016153195327,
                0.08619016153195327,
                0.0733464814110803,
                0.0733464814110803,
                0.05929858491543678,
                0.05929858491543678,
                0.04427743881741981,
                0.04427743881741981,
                0.028531388628933663,
                0.028531388628933663,
                0.0123412297999872,
                0.0123412297999872,
            ],
        ],
        A = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]],
        b = function (t, n, e) {
            return {
                x: (1 - e) * (1 - e) * (1 - e) * t[0] + 3 * (1 - e) * (1 - e) * e * t[1] + 3 * (1 - e) * e * e * t[2] + e * e * e * t[3],
                y: (1 - e) * (1 - e) * (1 - e) * n[0] + 3 * (1 - e) * (1 - e) * e * n[1] + 3 * (1 - e) * e * e * n[2] + e * e * e * n[3],
            };
        },
        P = function (t, n, e) {
            return T([3 * (t[1] - t[0]), 3 * (t[2] - t[1]), 3 * (t[3] - t[2])], [3 * (n[1] - n[0]), 3 * (n[2] - n[1]), 3 * (n[3] - n[2])], e);
        },
        m = function (t, n, e) {
            var i, r, h;
            (i = e / 2), (r = 0);
            for (var s = 0; s < 20; s++) (h = i * L[20][s] + i), (r += d[20][s] * S(t, n, h));
            return i * r;
        },
        T = function (t, n, e) {
            return { x: (1 - e) * (1 - e) * t[0] + 2 * (1 - e) * e * t[1] + e * e * t[2], y: (1 - e) * (1 - e) * n[0] + 2 * (1 - e) * e * n[1] + e * e * n[2] };
        },
        q = function (t, n, e) {
            void 0 === e && (e = 1);
            var i = t[0] - 2 * t[1] + t[2],
                r = n[0] - 2 * n[1] + n[2],
                h = 2 * t[1] - 2 * t[0],
                s = 2 * n[1] - 2 * n[0],
                a = 4 * (i * i + r * r),
                o = 4 * (i * h + r * s),
                g = h * h + s * s;
            if (0 === a) return e * Math.sqrt(Math.pow(t[2] - t[0], 2) + Math.pow(n[2] - n[0], 2));
            var u = o / (2 * a),
                l = e + u,
                c = g / a - u * u,
                f = l * l + c > 0 ? Math.sqrt(l * l + c) : 0,
                y = u * u + c > 0 ? Math.sqrt(u * u + c) : 0,
                p = u + Math.sqrt(u * u + c) !== 0 && (l + f) / (u + y) != 0 ? c * Math.log(Math.abs((l + f) / (u + y))) : 0;
            return (Math.sqrt(a) / 2) * (l * f - u * y + p);
        },
        _ = function (t, n, e) {
            return { x: 2 * (1 - e) * (t[1] - t[0]) + 2 * e * (t[2] - t[1]), y: 2 * (1 - e) * (n[1] - n[0]) + 2 * e * (n[2] - n[1]) };
        };
    function S(t, n, e) {
        var i = N(1, e, t),
            r = N(1, e, n),
            h = i * i + r * r;
        return Math.sqrt(h);
    }
    var N = function t(n, e, i) {
            var r,
                h,
                s = i.length - 1;
            if (0 === s) return 0;
            if (0 === n) {
                h = 0;
                for (var a = 0; a <= s; a++) h += A[s][a] * Math.pow(1 - e, s - a) * Math.pow(e, a) * i[a];
                return h;
            }
            r = new Array(s);
            for (var o = 0; o < s; o++) r[o] = s * (i[o + 1] - i[o]);
            return t(n - 1, e, r);
        },
        C = function (t, n, e) {
            for (var i = 1, r = t / n, h = (t - e(r)) / n, s = 0; i > 0.001; ) {
                var a = e(r + h),
                    o = Math.abs(t - a) / n;
                if (o < i) (i = o), (r += h);
                else {
                    var g = e(r - h),
                        u = Math.abs(t - g) / n;
                    u < i ? ((i = u), (r -= h)) : (h /= 2);
                }
                if (++s > 500) break;
            }
            return r;
        },
        j = e(function (t, n, e, r, h, s, a, o) {
            var g = this;
            i(this, "a", void 0),
                i(this, "b", void 0),
                i(this, "c", void 0),
                i(this, "d", void 0),
                i(this, "length", void 0),
                i(this, "getArcLength", void 0),
                i(this, "getPoint", void 0),
                i(this, "getDerivative", void 0),
                i(this, "getTotalLength", function () {
                    return g.length;
                }),
                i(this, "getPointAtLength", function (t) {
                    var n = [g.a.x, g.b.x, g.c.x, g.d.x],
                        e = [g.a.y, g.b.y, g.c.y, g.d.y],
                        i = C(t, g.length, function (t) {
                            return g.getArcLength(n, e, t);
                        });
                    return g.getPoint(n, e, i);
                }),
                i(this, "getTangentAtLength", function (t) {
                    var n = [g.a.x, g.b.x, g.c.x, g.d.x],
                        e = [g.a.y, g.b.y, g.c.y, g.d.y],
                        i = C(t, g.length, function (t) {
                            return g.getArcLength(n, e, t);
                        }),
                        r = g.getDerivative(n, e, i),
                        h = Math.sqrt(r.x * r.x + r.y * r.y);
                    return h > 0 ? { x: r.x / h, y: r.y / h } : { x: 0, y: 0 };
                }),
                i(this, "getPropertiesAtLength", function (t) {
                    var n,
                        e = [g.a.x, g.b.x, g.c.x, g.d.x],
                        i = [g.a.y, g.b.y, g.c.y, g.d.y],
                        r = C(t, g.length, function (t) {
                            return g.getArcLength(e, i, t);
                        }),
                        h = g.getDerivative(e, i, r),
                        s = Math.sqrt(h.x * h.x + h.y * h.y);
                    n = s > 0 ? { x: h.x / s, y: h.y / s } : { x: 0, y: 0 };
                    var a = g.getPoint(e, i, r);
                    return { x: a.x, y: a.y, tangentX: n.x, tangentY: n.y };
                }),
                i(this, "getC", function () {
                    return g.c;
                }),
                i(this, "getD", function () {
                    return g.d;
                }),
                (this.a = { x: t, y: n }),
                (this.b = { x: e, y: r }),
                (this.c = { x: h, y: s }),
                void 0 !== a && void 0 !== o
                    ? ((this.getArcLength = m), (this.getPoint = b), (this.getDerivative = P), (this.d = { x: a, y: o }))
                    : ((this.getArcLength = q), (this.getPoint = T), (this.getDerivative = _), (this.d = { x: 0, y: 0 })),
                (this.length = this.getArcLength([this.a.x, this.b.x, this.c.x, this.d.x], [this.a.y, this.b.y, this.c.y, this.d.y], 1));
        }),
        O = e(function (t) {
            var n = this;
            i(this, "length", 0),
                i(this, "partial_lengths", []),
                i(this, "functions", []),
                i(this, "initial_point", null),
                i(this, "getPartAtLength", function (t) {
                    t < 0 ? (t = 0) : t > n.length && (t = n.length);
                    for (var e = n.partial_lengths.length - 1; n.partial_lengths[e] >= t && e > 0; ) e--;
                    return e++, { fraction: t - n.partial_lengths[e - 1], i: e };
                }),
                i(this, "getTotalLength", function () {
                    return n.length;
                }),
                i(this, "getPointAtLength", function (t) {
                    var e = n.getPartAtLength(t),
                        i = n.functions[e.i];
                    if (i) return i.getPointAtLength(e.fraction);
                    if (n.initial_point) return n.initial_point;
                    throw new Error("Wrong function at this part.");
                }),
                i(this, "getTangentAtLength", function (t) {
                    var e = n.getPartAtLength(t),
                        i = n.functions[e.i];
                    if (i) return i.getTangentAtLength(e.fraction);
                    if (n.initial_point) return { x: 0, y: 0 };
                    throw new Error("Wrong function at this part.");
                }),
                i(this, "getPropertiesAtLength", function (t) {
                    var e = n.getPartAtLength(t),
                        i = n.functions[e.i];
                    if (i) return i.getPropertiesAtLength(e.fraction);
                    if (n.initial_point) return { x: n.initial_point.x, y: n.initial_point.y, tangentX: 0, tangentY: 0 };
                    throw new Error("Wrong function at this part.");
                }),
                i(this, "getParts", function () {
                    for (var t = [], e = 0; e < n.functions.length; e++)
                        if (null !== n.functions[e]) {
                            n.functions[e] = n.functions[e];
                            var i = {
                                start: n.functions[e].getPointAtLength(0),
                                end: n.functions[e].getPointAtLength(n.partial_lengths[e] - n.partial_lengths[e - 1]),
                                length: n.partial_lengths[e] - n.partial_lengths[e - 1],
                                getPointAtLength: n.functions[e].getPointAtLength,
                                getTangentAtLength: n.functions[e].getTangentAtLength,
                                getPropertiesAtLength: n.functions[e].getPropertiesAtLength,
                            };
                            t.push(i);
                        }
                    return t;
                });
            for (
                var e,
                    h = Array.isArray(t)
                        ? t
                        : (function (t) {
                              var n = (t && t.length > 0 ? t : "M0,0").match(o);
                              if (!n) throw new Error("No path elements found in string ".concat(t));
                              return n.reduce(function (t, n) {
                                  var e = n.charAt(0),
                                      i = e.toLowerCase(),
                                      h = u(n.substring(1));
                                  if (("m" === i && h.length > 2 && (t.push([e].concat(r(h.splice(0, 2)))), (i = "l"), (e = "m" === e ? "l" : "L")), "a" === i.toLowerCase() && (5 === h.length || 6 === h.length))) {
                                      var s = n.substring(1).trim().split(" ");
                                      h = [Number(s[0]), Number(s[1]), Number(s[2]), Number(s[3].charAt(0)), Number(s[3].charAt(1)), Number(s[3].substring(2)), Number(s[4])];
                                  }
                                  for (; h.length >= 0; ) {
                                      if (h.length === a[i]) {
                                          t.push([e].concat(r(h.splice(0, a[i]))));
                                          break;
                                      }
                                      if (h.length < a[i]) throw new Error('Malformed path data: "'.concat(e, '" must have ').concat(a[i], " elements and has ").concat(h.length, ": ").concat(n));
                                      t.push([e].concat(r(h.splice(0, a[i]))));
                                  }
                                  return t;
                              }, []);
                          })(t),
                    s = [0, 0],
                    g = [0, 0],
                    f = [0, 0],
                    y = 0;
                y < h.length;
                y++
            ) {
                if ("M" === h[y][0]) (f = [(s = [h[y][1], h[y][2]])[0], s[1]]), this.functions.push(null), 0 === y && (this.initial_point = { x: h[y][1], y: h[y][2] });
                else if ("m" === h[y][0]) (f = [(s = [h[y][1] + s[0], h[y][2] + s[1]])[0], s[1]]), this.functions.push(null);
                else if ("L" === h[y][0]) (this.length += Math.sqrt(Math.pow(s[0] - h[y][1], 2) + Math.pow(s[1] - h[y][2], 2))), this.functions.push(new l(s[0], h[y][1], s[1], h[y][2])), (s = [h[y][1], h[y][2]]);
                else if ("l" === h[y][0]) (this.length += Math.sqrt(Math.pow(h[y][1], 2) + Math.pow(h[y][2], 2))), this.functions.push(new l(s[0], h[y][1] + s[0], s[1], h[y][2] + s[1])), (s = [h[y][1] + s[0], h[y][2] + s[1]]);
                else if ("H" === h[y][0]) (this.length += Math.abs(s[0] - h[y][1])), this.functions.push(new l(s[0], h[y][1], s[1], s[1])), (s[0] = h[y][1]);
                else if ("h" === h[y][0]) (this.length += Math.abs(h[y][1])), this.functions.push(new l(s[0], s[0] + h[y][1], s[1], s[1])), (s[0] = h[y][1] + s[0]);
                else if ("V" === h[y][0]) (this.length += Math.abs(s[1] - h[y][1])), this.functions.push(new l(s[0], s[0], s[1], h[y][1])), (s[1] = h[y][1]);
                else if ("v" === h[y][0]) (this.length += Math.abs(h[y][1])), this.functions.push(new l(s[0], s[0], s[1], s[1] + h[y][1])), (s[1] = h[y][1] + s[1]);
                else if ("z" === h[y][0] || "Z" === h[y][0]) (this.length += Math.sqrt(Math.pow(f[0] - s[0], 2) + Math.pow(f[1] - s[1], 2))), this.functions.push(new l(s[0], f[0], s[1], f[1])), (s = [f[0], f[1]]);
                else if ("C" === h[y][0]) (e = new j(s[0], s[1], h[y][1], h[y][2], h[y][3], h[y][4], h[y][5], h[y][6])), (this.length += e.getTotalLength()), (s = [h[y][5], h[y][6]]), this.functions.push(e);
                else if ("c" === h[y][0])
                    (e = new j(s[0], s[1], s[0] + h[y][1], s[1] + h[y][2], s[0] + h[y][3], s[1] + h[y][4], s[0] + h[y][5], s[1] + h[y][6])).getTotalLength() > 0
                        ? ((this.length += e.getTotalLength()), this.functions.push(e), (s = [h[y][5] + s[0], h[y][6] + s[1]]))
                        : this.functions.push(new l(s[0], s[0], s[1], s[1]));
                else if ("S" === h[y][0]) {
                    if (y > 0 && ["C", "c", "S", "s"].indexOf(h[y - 1][0]) > -1) {
                        if (e) {
                            var p = e.getC();
                            e = new j(s[0], s[1], 2 * s[0] - p.x, 2 * s[1] - p.y, h[y][1], h[y][2], h[y][3], h[y][4]);
                        }
                    } else e = new j(s[0], s[1], s[0], s[1], h[y][1], h[y][2], h[y][3], h[y][4]);
                    e && ((this.length += e.getTotalLength()), (s = [h[y][3], h[y][4]]), this.functions.push(e));
                } else if ("s" === h[y][0]) {
                    if (y > 0 && ["C", "c", "S", "s"].indexOf(h[y - 1][0]) > -1) {
                        if (e) {
                            var x = e.getC(),
                                v = e.getD();
                            e = new j(s[0], s[1], s[0] + v.x - x.x, s[1] + v.y - x.y, s[0] + h[y][1], s[1] + h[y][2], s[0] + h[y][3], s[1] + h[y][4]);
                        }
                    } else e = new j(s[0], s[1], s[0], s[1], s[0] + h[y][1], s[1] + h[y][2], s[0] + h[y][3], s[1] + h[y][4]);
                    e && ((this.length += e.getTotalLength()), (s = [h[y][3] + s[0], h[y][4] + s[1]]), this.functions.push(e));
                } else if ("Q" === h[y][0]) {
                    if (s[0] == h[y][1] && s[1] == h[y][2]) {
                        var M = new l(h[y][1], h[y][3], h[y][2], h[y][4]);
                        (this.length += M.getTotalLength()), this.functions.push(M);
                    } else (e = new j(s[0], s[1], h[y][1], h[y][2], h[y][3], h[y][4], void 0, void 0)), (this.length += e.getTotalLength()), this.functions.push(e);
                    (s = [h[y][3], h[y][4]]), (g = [h[y][1], h[y][2]]);
                } else if ("q" === h[y][0]) {
                    if (0 != h[y][1] || 0 != h[y][2]) (e = new j(s[0], s[1], s[0] + h[y][1], s[1] + h[y][2], s[0] + h[y][3], s[1] + h[y][4], void 0, void 0)), (this.length += e.getTotalLength()), this.functions.push(e);
                    else {
                        var w = new l(s[0] + h[y][1], s[0] + h[y][3], s[1] + h[y][2], s[1] + h[y][4]);
                        (this.length += w.getTotalLength()), this.functions.push(w);
                    }
                    (g = [s[0] + h[y][1], s[1] + h[y][2]]), (s = [h[y][3] + s[0], h[y][4] + s[1]]);
                } else if ("T" === h[y][0]) {
                    if (y > 0 && ["Q", "q", "T", "t"].indexOf(h[y - 1][0]) > -1) (e = new j(s[0], s[1], 2 * s[0] - g[0], 2 * s[1] - g[1], h[y][1], h[y][2], void 0, void 0)), this.functions.push(e), (this.length += e.getTotalLength());
                    else {
                        var L = new l(s[0], h[y][1], s[1], h[y][2]);
                        this.functions.push(L), (this.length += L.getTotalLength());
                    }
                    (g = [2 * s[0] - g[0], 2 * s[1] - g[1]]), (s = [h[y][1], h[y][2]]);
                } else if ("t" === h[y][0]) {
                    if (y > 0 && ["Q", "q", "T", "t"].indexOf(h[y - 1][0]) > -1)
                        (e = new j(s[0], s[1], 2 * s[0] - g[0], 2 * s[1] - g[1], s[0] + h[y][1], s[1] + h[y][2], void 0, void 0)), (this.length += e.getTotalLength()), this.functions.push(e);
                    else {
                        var d = new l(s[0], s[0] + h[y][1], s[1], s[1] + h[y][2]);
                        (this.length += d.getTotalLength()), this.functions.push(d);
                    }
                    (g = [2 * s[0] - g[0], 2 * s[1] - g[1]]), (s = [h[y][1] + s[0], h[y][2] + s[1]]);
                } else if ("A" === h[y][0]) {
                    var A = new c(s[0], s[1], h[y][1], h[y][2], h[y][3], 1 === h[y][4], 1 === h[y][5], h[y][6], h[y][7]);
                    (this.length += A.getTotalLength()), (s = [h[y][6], h[y][7]]), this.functions.push(A);
                } else if ("a" === h[y][0]) {
                    var b = new c(s[0], s[1], h[y][1], h[y][2], h[y][3], 1 === h[y][4], 1 === h[y][5], s[0] + h[y][6], s[1] + h[y][7]);
                    (this.length += b.getTotalLength()), (s = [s[0] + h[y][6], s[1] + h[y][7]]), this.functions.push(b);
                }
                this.partial_lengths.push(this.length);
            }
        }),
        E = e(function (t) {
            var n = this;
            if (
                (i(this, "inst", void 0),
                i(this, "getTotalLength", function () {
                    return n.inst.getTotalLength();
                }),
                i(this, "getPointAtLength", function (t) {
                    return n.inst.getPointAtLength(t);
                }),
                i(this, "getTangentAtLength", function (t) {
                    return n.inst.getTangentAtLength(t);
                }),
                i(this, "getPropertiesAtLength", function (t) {
                    return n.inst.getPropertiesAtLength(t);
                }),
                i(this, "getParts", function () {
                    return n.inst.getParts();
                }),
                (this.inst = new O(t)),
                !(this instanceof E))
            )
                return new E(t);
        });
    window.svgPathProperties = E;
